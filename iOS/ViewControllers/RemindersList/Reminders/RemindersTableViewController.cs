// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Specialized;
using System.Linq;
using Foundation;
using UIKit;
using Xamarin.Forms;
using Xamarin.Forms.Platform.iOS;

namespace Assessment.iOS
{
	public partial class RemindersTableViewController : UITableViewController
	{
        UIRefreshControl refreshControl;

        public ReminderListViewModel ViewModel;

        public RemindersTableViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            if (ViewModel == null)
            {
                ViewModel = new ReminderListViewModel();
            }

            // Setup UITableView.
            refreshControl = new UIRefreshControl();
            refreshControl.ValueChanged += RefreshControl_ValueChanged;
            TableView.Add(refreshControl);
            TableView.Source = new ReminderTableDataSource(ViewModel);

            Title = ViewModel.Title;

            ViewModel.PropertyChanged += IsBusy_PropertyChanged;
            ViewModel.Reminders.CollectionChanged += Items_CollectionChanged;
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            if (ViewModel.Reminders.Count == 0)
                ViewModel.LoadReminderListCommand.Execute(null);
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == "CreateReminderSegue")
            {
                var controller = segue.DestinationViewController as CreateReminderViewController;
                controller.ViewModel = ViewModel;
            }
            else if (segue.Identifier == "ReminderDetailsSegue")
            {
                var controller = segue.DestinationViewController as ReminderDetailViewController;
                var indexPath = TableView.IndexPathForCell(sender as UITableViewCell);
                var reminder = ViewModel.Reminders[indexPath.Row];

                controller.ViewModel = ViewModel;
                controller.Reminder = reminder;
            }
        }

        void RefreshControl_ValueChanged(object sender, EventArgs e)
        {
            if (!ViewModel.IsBusy && refreshControl.Refreshing)
                ViewModel.LoadReminderListCommand.Execute(null);
        }

        void IsBusy_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            var propertyName = e.PropertyName;
            switch (propertyName)
            {
                case nameof(ViewModel.IsBusy):
                    {
                        InvokeOnMainThread(() =>
                        {
                            if (ViewModel.IsBusy && !refreshControl.Refreshing)
                                refreshControl.BeginRefreshing();
                            else if (!ViewModel.IsBusy)
                                refreshControl.EndRefreshing();
                        });
                    }
                    break;
            }
        }

        void Items_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            InvokeOnMainThread(() => TableView.ReloadData());
        }
    }

    class ReminderTableDataSource : UITableViewSource
    {
        static readonly NSString CELL_IDENTIFIER = new NSString("Reminder_cell");

        ReminderListViewModel ViewModel;
        UITapGestureRecognizer CompletedTapGestureRecognizer;

        public ReminderTableDataSource(ReminderListViewModel viewModel)
        {
            this.ViewModel = viewModel;

            Action action = () =>
            {
                //change the button

                //save the completed
            };
            CompletedTapGestureRecognizer = new UITapGestureRecognizer(action);
        }

        public override nint RowsInSection(UITableView tableview, nint section) => ViewModel.Reminders.Count;
        public override nint NumberOfSections(UITableView tableView) => 1;

        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var cell = tableView.DequeueReusableCell(CELL_IDENTIFIER, indexPath);

            var reminder = ViewModel.Reminders[indexPath.Row];
            cell.TextLabel.Text = reminder.Title;
            cell.DetailTextLabel.Text = reminder.DueDate?.ToString("d");
            cell.ImageView.TintColor = Color.FromHex(ViewModel.ReminderList.Color).ToUIColor();
            cell.ImageView.Image = reminder.Completed ? UIImage.GetSystemImage("checkmark.circle.fill") : UIImage.GetSystemImage("circle");
            cell.LayoutMargins = UIEdgeInsets.Zero;

            return cell;
        }

        public override void CommitEditingStyle(UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath)
        {
            if (editingStyle == UITableViewCellEditingStyle.Delete)
            {
                ViewModel.DeleteReminderCommand.Execute(ViewModel.Reminders[indexPath.Row]);
            }
        }
    }
}
