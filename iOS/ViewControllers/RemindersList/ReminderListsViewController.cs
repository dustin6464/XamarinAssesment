// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Specialized;
using Foundation;
using UIKit;
using Xamarin.Forms;
using Xamarin.Forms.Platform.iOS;

namespace Assessment.iOS
{
	public partial class ReminderListsViewController : UITableViewController
	{
        UIRefreshControl refreshControl;

        public ReminderListsViewModel ViewModel { get; set; }

        public ReminderListsViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            BindUI();
        }

        private void BindUI()
        {
            ViewModel = new ReminderListsViewModel();

            Title = ViewModel.Title;

            refreshControl = new UIRefreshControl();
            refreshControl.ValueChanged += RefreshControl_ValueChanged;
            TableView.Add(refreshControl);
            TableView.Source = new ReminderListTableDataSource(ViewModel);

            ViewModel.PropertyChanged += IsBusy_PropertyChanged;
            ViewModel.ReminderLists.CollectionChanged += Items_CollectionChanged;
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            if (ViewModel.ReminderLists.Count == 0)
                ViewModel.LoadReminderListsCommand.Execute(null);
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == "ShowRemindersTableViewController")
            {
                var controller = segue.DestinationViewController as RemindersTableViewController;
                var indexPath = TableView.IndexPathForCell(sender as UITableViewCell);
                var item = ViewModel.ReminderLists[indexPath.Row];

                controller.ViewModel = new ReminderListViewModel(item);
            }
            else
            {
                var controller = segue.DestinationViewController as CreateReminderListViewController;
                controller.ViewModel = ViewModel;
            }
        }

        void RefreshControl_ValueChanged(object sender, EventArgs e)
        {
            if (!ViewModel.IsBusy && refreshControl.Refreshing)
                ViewModel.LoadReminderListsCommand.Execute(null);
        }

        void IsBusy_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            var propertyName = e.PropertyName;
            switch (propertyName)
            {
                case nameof(ViewModel.IsBusy):
                    {
                        InvokeOnMainThread(() =>
                        {
                            if (ViewModel.IsBusy && !refreshControl.Refreshing)
                                refreshControl.BeginRefreshing();
                            else if (!ViewModel.IsBusy)
                            {
                                refreshControl.EndRefreshing();
                                if (ViewModel.ReminderLists.Count == 0)
                                {
                                    UIStoryboard storyboard = UIStoryboard.FromName("Main", null);
                                    var createVc = storyboard.InstantiateViewController("CreateReminderListViewController") as CreateReminderListViewController;
                                    createVc.ViewModel = ViewModel;
                                    this.NavigationController.PresentModalViewController(createVc, true);
                                }
                            }
                        });
                    }
                    break;
            }
        }

        void Items_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            InvokeOnMainThread(() => TableView.ReloadData());
        }
    }

    class ReminderListTableDataSource : UITableViewSource
    {
        static readonly NSString CELL_IDENTIFIER = new NSString("lIST_CELL");

        ReminderListsViewModel ViewModel;

        public ReminderListTableDataSource(ReminderListsViewModel viewModel)
        {
            this.ViewModel = viewModel;
        }

        public override nint RowsInSection(UITableView tableview, nint section) => ViewModel.ReminderLists.Count;
        public override nint NumberOfSections(UITableView tableView) => 1;

        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var cell = tableView.DequeueReusableCell(CELL_IDENTIFIER, indexPath);

            var list = ViewModel.ReminderLists[indexPath.Row];
            cell.TextLabel.Text = list.Title;
            cell.ImageView.TintColor = Color.FromHex(list.Color).ToUIColor();
            cell.DetailTextLabel.Text = list.DetailString;
            cell.LayoutMargins = UIEdgeInsets.Zero;

            return cell;
        }

        public override void CommitEditingStyle(UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath)
        {
            if (editingStyle == UITableViewCellEditingStyle.Delete)
            {
                ViewModel.DeleteReminderListCommand.Execute(ViewModel.ReminderLists[indexPath.Row]);
            }
        }
    }
}
